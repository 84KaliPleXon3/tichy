                            _       _
                        _  (_)     | |
                      _| |_ _  ____| |__  _   _
                     (_   _) |/ ___)  _ \| | | |
                       | |_| ( (___| | | | |_| |
                        \__)_|\____)_| |_|\__  |
                                         (____/

                                Tichy 

copyright 2008 Guillaume Chereau <charlie@openmoko.org>

Tichy is free software: you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free
Software Foundation, either version 3 of the License, or (at your
option) any later version.

Tichy is distributed in the hope that it will be useful, but WITHOUT
ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
for more details.

You should have received a copy of the GNU General Public License
along with Tichy.  If not, see <http://www.gnu.org/licenses/>.


                                ABOUT

This is a python applets manager.  My goal is to make a very simple
environment for people who want to write applications for OpenMoko.
The approach is very different from what we can get in the currents
available images for OM.  I came to the conclusion that the current
way of writing applications for desktop computer is not suitable for
mobile phone, where applications need to be very tightly connected to
each other.
    
                    The main ideas of tichy are :

- Everything is written in python (Or cython/pyrex if we need
  speed). So there is no choice of the language here, all the applets
  have to be written in python. It is still possible to start external
  applications, but they won't be able to communicate with the rest of
  the system.

- All the applications run in the same python interpreter. Once again
  it is possible to start external applications that will run in
  separate process, but they won't be able to communicate with the
  system.

- Everything is a plug-in. Even the most fundamental services (like
  file browser, keyboard, etc) are defined into plug-in.

- Plugins can register and request for services. A service is just a
  python object with a defined interface.

- All the plugins share the same mainloop. They can't block and have
  to use callback instead. To ease things, I implemented a tasklet
  system that allow us to use the yield syntax of python to write
  callback code that looks like threaded code.

- The plugins should only describe the items they act on, and not the
  way they show it. The design itself is controled by the 'Design'
  service. This allow us to have many different kind of design for the
  same applications.


                           RUN ON OPENMOKO

Since paroli integration, the only way to start tichy is to use
'tichy-launcher' script in the test repository. This script will load
all the plugins, then wait for DBus calls on org.tichy.launcher (type
./tichy-launcher --help for more information). Tichy can run locally
without being installed first. When started from an ssh connection,
remember to set DISPLAY to :0 first.

For the DBus connection to succedd, we need to make sure than the
proper dbus configurations file are installed in the filesystem. That
is the file ./data/dbus/org.tichy.launcher.service should go into
/usr/share/dbus-1/system-services/ and the file ./data/dbus/tichy.conf
should go in /etc/dbus-1/system.d/

To start a application send a dbus call to org.tichy.launcher, object
/Launcher method org.tichy.Launcher.Launch(s). The parameter being the
name of the application we want to start.

You can use dbus-send to make the call :

dbus-send --system --dest='org.tichy.launcher' /Launcher \
 --print-reply org.tichy.Launcher.Launch string:Contacts

Also see the tichy.cfg file to see how to configure the plugin path or
the default services.


                          RUN ON THE DESKTOP

[To complete : Can we actually run tichy on the desktop since paroli
merge ?] It should be possible, but we need to check if python etk
binding works.
    
                           GRAPHIC BACKENDS
    
By default tichy will try to use tichy/gui_paroli as the widgets
library.

                             CONFIG FILE

Tichy will try to load configuration files in three locations, in this
order : ./tichy.cfg, /etc/tichy/tichy.cfg, ~/.tichy/tichy.cfg.  The
files are in format used by python ConfigParser library. See the file
'configuration.txt' in the doc driectory for more information about
the possible configurations.

                            DOCUMENTATION

Some documentation can be found in the doc directory. Most of the
classes have embedded documentation using extended markup format. You
can generate the doc with epydoc, from the doc directory :

epydoc ../tichy

                               AUTHORS

- Guillaume "Charlie" Chereau, main developer <charlie@openmoko.org>
- Mirko Lindler <mmirko@penmoko.com>
